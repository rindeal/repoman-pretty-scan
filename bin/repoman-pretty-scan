#!/usr/bin/env python3
# Python-Version-Compatibility: 3.6
##
# Copyright (C)  2018 Jan Chren (rindeal)
#
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.
#
# SPDX-License-Identifier: GPL-3.0-only
##


import argparse
import os
import subprocess
import sys

import rindeal.travis_ci.utils as TravisCI


_SCRIPT_DIR_ = os.path.dirname(os.path.realpath(__file__))
_PROJECT_ROOT_DIR_ = os.path.realpath(os.path.join(_SCRIPT_DIR_, ".."))
_SETUP_PY_PATH_ = os.path.join(_PROJECT_ROOT_DIR_, "setup.py")
_LIB_DIR_ = os.path.realpath(os.path.join(_PROJECT_ROOT_DIR_, "lib"))
if os.path.exists(_SETUP_PY_PATH_):
	sys.path.insert(0, sys.path.insert(0, _LIB_DIR_))

from rindeal.portage.repoman.pretty_scan import Parser, Printer
from rindeal.portage.repoman.pretty_scan._pkg_ import PkgMetadata


def main():
	argparser = argparse.ArgumentParser(
		description=PkgMetadata.summary,
		formatter_class=argparse.RawDescriptionHelpFormatter,
	)
	argparser.add_argument(
		'-v', '--version',
		action='version',
		version=f"%(prog)s {PkgMetadata.version}\n\n{PkgMetadata.copyright}")
	argparser.add_argument(
		'--travis-ci', action='store_true',
		help="Use this if you're running on Travis CI to use folding and timing in the output.")
	mutex_group = argparser.add_mutually_exclusive_group()
	mutex_group.add_argument(
		'-f', '--parse-file', metavar='FILE',
		help="Parse data from FILE instead of running repoman.")
	mutex_group.add_argument(
		'-c', '--parse-stdin', action='store_true',
		help="Parse data from stdin instead of running repoman.")
	argparser.add_argument(
		'--truncate', choices={'y', 'n'}, default='y',
		help="Truncate long lines, width can be customized with --max-width.")
	argparser.add_argument(
		'--max-width', metavar='WIDTH', type=int,
		help="Maximum width of a line before being truncated. Used only if `--truncate=y`.")
	argparser.add_argument(
		'--placeholder', default="...",
		help="Placeholder used at the end of truncated lines. Used only if `--truncate=y`.")
	argparser.add_argument(
		'REPOMAN_ARGS', nargs=argparse.REMAINDER,
		help=(
			"Arguments passed directly ro repoman. " 
			"Prepend `--` so that they won't be treated as our args."))
	args = argparser.parse_args()

	proc = None
	input_stream = None
	printer_kwargs = {}
	verbose_fold = TravisCI.TimedFold("repoman.verbose", desc="Repoman verbose log", stream=sys.stderr)

	if args.parse_stdin:
		input_stream = sys.stdin
	if args.parse_file:
		input_stream = open(args.parse_file, encoding="utf-8")
	if input_stream is None:
		if args.travis_ci:
			verbose_fold.start()

		repoman_args = [a for a in args.REPOMAN_ARGS if a != "--"]
		proc = subprocess.Popen(
			["repoman", "full", "--verbose", "--output-style", "column"] + repoman_args,
			stdout=subprocess.PIPE,
			encoding="utf-8"
		)
		input_stream = proc.stdout

	parser = Parser(input_stream)

	results = parser.parse()

	if verbose_fold.started():
		verbose_fold.end()

	bool_arg_val_binding = {'y': True, 'n': False}

	printer_kwargs['truncate'] = bool_arg_val_binding[args.truncate]
	if args.max_width is not None:
		printer_kwargs['max_width'] = args.max_width
	printer_kwargs['placeholder'] = args.placeholder

	printer = Printer(results, **printer_kwargs)
	printer.print()

	if args.travis_ci:
		print()
		with TravisCI.Fold("repoman.results.raw", desc="Raw repoman output"):
			for line in parser.raw_input:
				print(line, end='')

	if proc:
		proc.wait(timeout=5)
		argparser.exit(proc.returncode)


if __name__ == '__main__':
	main()
else:
	raise ImportError("This script is not importable")
